{"version":3,"sources":["Burger.js","App.js","serviceWorker.js","index.js"],"names":["Burger","props","toppings","map","topping","idx","key","onClick","onRemove","className","App","state","burger","addTopping","setState","removeTopping","targetIndex","prevBurger","filter","createMelbourneTrifecta","resetState","this","numOfCheese","elem","length","howCheesy","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAQe,SAASA,EAAOC,GAC7B,OAAOA,EAAMC,SAASC,KAAI,SAACC,EAASC,GAAV,OACxB,yBACEC,IAAKD,EACLE,QAAS,kBAAIN,EAAMO,SAASH,IAC5BI,UAAWL,O,IC2GFM,E,4MAjGbC,MAAQ,CACNC,OAAQ,I,EAGVC,WAAa,SAAAT,GACX,EAAKU,SAAS,CACZF,OAAO,CAAER,GAAH,mBAAe,EAAKO,MAAMC,Y,EAIpCG,cAAgB,SAAAC,GACd,IAAMC,EAAa,EAAKN,MAAMC,OAE9B,EAAKE,SAAS,CACZF,OAAQK,EAAWC,QAAO,SAACd,EAASC,GAAV,OAAiBA,IAAMW,Q,EAIrDG,wBAA0B,WACxB,EAAKL,SAAS,CACZF,OAAQ,CAAC,MAAO,SAAU,SAAU,QAAS,SAAU,SAAU,QAAS,SAAU,SAAU,QAAS,U,EAI3GQ,WAAa,WACX,EAAKN,SAAS,CACZF,OAAO,M,uDAIF,IAAD,OAGEA,EAAWS,KAAKV,MAAhBC,OAER,OACE,yBAAKH,UAAU,OACb,+BACE,yBAAKA,UAAU,gBACb,oCACA,6BACE,4BAAQF,QAAS,kBAAI,EAAKM,WAAW,YAArC,WAIF,6BACE,4BAAQN,QAAS,kBAAI,EAAKM,WAAW,YAArC,WAIF,6BACE,4BAAQN,QAAS,kBAAI,EAAKM,WAAW,aAArC,YAIF,6BACE,4BAAQN,QAAS,kBAAI,EAAKM,WAAW,WAArC,UAIF,6BACE,4BAAQN,QAAS,kBAAI,EAAKM,WAAW,WAArC,UAIF,6BACE,4BAAQN,QAAS,kBAAI,EAAKM,WAAW,SAArC,QAIF,6BACE,4BAAQN,QAASc,KAAKF,yBAAtB,sBAIF,yBAAKV,UAAU,aACb,4BAAQF,QAASc,KAAKD,YAAtB,WAGA,2BAjGd,SAAmBR,GACjB,IAAIU,EAAcV,EAAOM,QAAO,SAAAK,GAAI,MAAS,WAAPA,KAEtC,OAA0B,IAAvBD,EAAYE,QAAmC,IAArBF,EAAYE,YACvC,EAC8B,IAAvBF,EAAYE,OACb,uBACwB,IAAvBF,EAAYE,OACb,uBACwB,IAAvBF,EAAYE,OACb,0BAEA,wBAqFQC,CAAUb,KAEpB,0BAAMH,UAAU,aAEd,6BAASA,UAAU,kBACjB,kBAACT,EAAD,CACEE,SAAUU,EACVJ,SAAUa,KAAKN,iBAGnB,yBAAKN,UAAU,gB,GA3FPiB,IAAMC,WCTJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9d22048e.chunk.js","sourcesContent":["import React from 'react';\n\n// props = {\n//    toppings: [],\n//    onRemove: ()=>{}\n// }\n\n// drawing the div with the elements in array\nexport default function Burger(props){\n  return props.toppings.map((topping, idx) => (\n    <div \n      key={idx} \n      onClick={()=>props.onRemove(idx)}\n      className={topping}\n    >\n    </div>\n  ))\n}","import React from 'react';\nimport './App.css';\nimport Burger from './Burger'\n// import currency from 'currency'\n\nfunction howCheesy(burger){\n  let numOfCheese = burger.filter(elem=>elem==='cheese')\n\n  if(numOfCheese.length === 0||numOfCheese.length===1){\n    return\n  }else if(numOfCheese.length === 2){\n    return `double cheese burger`\n  }else if(numOfCheese.length === 3){\n    return `triple cheese burger`\n  }else if(numOfCheese.length === 4){\n    return `quadruple cheese burger`\n  }else{\n    return `maximum cheese burger`\n  }\n}\n\nclass App extends React.Component {\n\n  state = {\n    burger: []\n  }\n\n  addTopping = topping =>{\n    this.setState({\n      burger: [topping, ...this.state.burger]\n    })\n  }\n\n  removeTopping = targetIndex =>{\n    const prevBurger = this.state.burger\n\n    this.setState({\n      burger: prevBurger.filter((topping, idx)=> idx!==targetIndex)\n    })\n  }\n\n  createMelbourneTrifecta = () =>{\n    this.setState({\n      burger: ['bun', 'cheese', 'tomato', 'patty', 'cheese', 'tomato', 'patty', 'cheese', 'tomato', 'patty', 'bun']\n    })\n  }\n\n  resetState = () =>{\n    this.setState({\n      burger:[]\n    })\n  }\n\n  render(){\n\n    // const burger = this.state.burger\n    const { burger } = this.state\n\n    return (\n      <div className=\"App\">\n        <aside>\n          <div className=\"menu-wrapper\">\n            <h2>menu</h2>\n            <div>\n              <button onClick={()=>this.addTopping('tomato')}>\n                tomato\n              </button>\n            </div>\n            <div>\n              <button onClick={()=>this.addTopping('cheese')}>\n                cheese\n              </button>\n            </div>\n            <div>\n              <button onClick={()=>this.addTopping('lettuce')}>\n                lettuce\n              </button>\n            </div>\n            <div>\n              <button onClick={()=>this.addTopping('patty')}>\n                patty\n              </button>\n            </div>\n            <div>\n              <button onClick={()=>this.addTopping('sauce')}>\n                sauce\n              </button>\n            </div>\n            <div>\n              <button onClick={()=>this.addTopping('bun')}>\n                bun\n              </button>\n            </div>\n            <div>\n              <button onClick={this.createMelbourneTrifecta}>\n                MelbourneTrifecta\n              </button>\n            </div>\n            <div className=\"reset-btn\">\n              <button onClick={this.resetState}>Reset</button>\n            </div>\n          </div>\n              <p>{howCheesy(burger)}</p>\n        </aside>\n        <main className=\"main-area\">\n          {/* <p>{howCheesy(burger)}</p> */}\n          <section className=\"burger-wrapper\">\n            <Burger \n              toppings={burger} \n              onRemove={this.removeTopping}\n            />\n          </section>\n          <div className=\"plate\"></div>\n        </main>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}